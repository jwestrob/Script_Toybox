import os, sys, csv
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.SeqFeature import SeqFeature, FeatureLocation
from Bio import SeqIO
import pandas as pd
import argparse

parser = argparse.ArgumentParser(description='Parse a GenBank file and fetch the closest upstream/downstream CDS to the provided coordinates generated by a blastn search.')

parser.add_argument('-coord', metavar='(file with coordinates of target hits)', help='Provide the coordinates to look at in kinda .bed format?')
parser.add_argument('-outfile', metavar='outfile name', help='Name of desired output file')

args = parser.parse_args()

coords = args.coord
outfile = args.outfile

def invert_dict(d):
    return dict([ (v, k) for k, v in d.iteritems( ) ])

def test_1(d, k):
    if k in d:
        return True
    else:
        return False

def scanner(start, end, recs):
    min_upstream = 50000
    min_downstream = 50000

    feats = [feat for feat in recs.features if feat.type == "CDS"]
    min_up_feat = feats[0]
    min_down_feat = feats[0]


    if start > end:
        start, end = end, start
    for feat in feats:
        f_start = feat.location.start
        f_end = feat.location.end
        if feat.location.strand == -1:
            if f_start < start:
                prox = start - f_start
                if prox < min_upstream:
                    min_upstream = prox
                    min_up_feat = feat
            if f_end > end:
                prox = f_end - end
                if prox < min_downstream:
                    min_downstream = prox
                    min_down_feat = feat
        if feat.location.strand == 1:
            if f_end < start:
                prox = start - f_end
                if prox < min_upstream:
                    min_upstream = prox
                    min_up_feat = feat
            if f_start > end:
                prox = f_start - end
                if prox < min_downstream:
                    min_downstream = prox
                    min_down_feat = feat

    return min_up_feat, min_down_feat

def main():
    name_dict = {"AP200":"CP002121",\
                "670-6B":"CP002176",\
                "70585":"CP000918",\
                "ATCC700669":"FM211187",\
                "CGSP14":"CP001033",\
                "D39":"CP000410",\
                "G54":"CP001015",\
                "Hu19A":"CP000936",\
                "INV104":"FQ312030",\
                "INV200":"FQ312029",\
                "JJA":"CP000919",\
                "OXC141":"FQ312027",\
                "P1031":"CP000920",\
                "SPN032672":"NC_021003",\
                "SPN033038":"NC_021004",\
                "SPN034183":"FQ312043",\
                "SPN994038":"FQ312041",\
                "SPN994039":"FQ312044",\
                "SPN034156":"FQ312045",\
                "T19F":"CP000921",\
                "TIGR4":"AE005672"}
    name_dict = invert_dict(name_dict)
    # get all sequence records for the specified genbank file
    feat_arr = []
    feat_arr.append(['Strain ID', 'Hit No.', 'Upstream feature strand', 'Upstream feature start', 'Upstream feature end', 'Upstream feature locus tag',\
                    'Upstream feature protein product', 'Upstream feature protein ID', 'Upstream feature AA sequence',\
                    'Downstream feature strand', 'Downstream feature start', 'Downstream feature end', 'Downstream feature locus tag',\
                    'Downstream feature protein product', 'Downstream feature protein ID', 'Downstream feature AA sequence'])
    for filename in os.listdir('.'):
        if filename.split('.')[-1] == 'gb':
            print("Analyzing ", filename.split('.')[0])
            recs = [rec for rec in SeqIO.parse(filename, "genbank")]

            #Grab coordinates and IDs from input file
            c_df = pd.read_csv(coords, sep='\t')

            # print the number of sequence records that were extracted
            print("Records: ", len(recs))
            if len(recs) != 1:
                print("ugh whatever bye felicia")
                sys.exit()

            #Which sample are you working with?
            ID = recs[0].name

            #Get rid of everything else.
            reduced_df = c_df[c_df['subject_id'] == ID]

            upstream_sense = 0
            downstream_sense = 0

            for index, row in reduced_df.iterrows():
                print(index)
                upstream, downstream = scanner(reduced_df['seq_start'][index], reduced_df['seq_end'][index], recs[0])

                if not test_1(upstream.qualifiers, ('protein_id')):
                    upstream_protein_id = None
                else:
                    upstream_protein_id = upstream.qualifiers[('protein_id')]

                if not test_1(downstream.qualifiers, ('protein_id')):
                    downstream_protein_id = None
                else:
                    downstream_protein_id = downstream.qualifiers[('protein_id')]

                if not test_1(upstream.qualifiers, ('translation')):
                    upstream_translation = None
                else:
                    upstream_translation = upstream.qualifiers[('translation')]

                if not test_1(downstream.qualifiers, ('translation')):
                    downstream_translation = None
                else:
                    downstream_translation = downstream.qualifiers[('translation')]


                #Add information to array
                feat_arr.append([name_dict[ID], index, upstream.location.strand, upstream.location.start, upstream.location.end,\
                                upstream.qualifiers[('locus_tag')], upstream.qualifiers[('product')], upstream_protein_id, upstream_translation,\
                                downstream.location.strand, downstream.location.start, downstream.location.end,\
                                downstream.qualifiers[('locus_tag')], downstream.qualifiers[('product')], downstream_protein_id, downstream_translation])
                print("Hit number" + str(index) + "has been profiled.")


    #Flatten the resulting lists so you don't have to deal with brackets for the rest of your life.
    for row in feat_arr:
        for index, element in enumerate(row):
            if type(element) == list:
                new_el = element[0]
                row[index] = new_el

    with open(outfile, 'w') as writefile:
        csvwriter = csv.writer(writefile, delimiter=',')
        for element in feat_arr:
            csvwriter.writerow(element)

    print("boogie")



if __name__ == "__main__":
    main()
